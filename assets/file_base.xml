<?xml version="1.0" encoding="UTF-8" standalone="no"?><node Class="com.github.javaparser.ast.CompilationUnit"><types><node Class="com.github.javaparser.ast.body.ClassOrInterfaceDeclaration" isInterface="false"><members><node Class="com.github.javaparser.ast.body.MethodDeclaration"><body Class="com.github.javaparser.ast.stmt.BlockStmt"><statements><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.VariableDeclarationExpr"><variables><node Class="com.github.javaparser.ast.body.VariableDeclarator"><initializer Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">4</initializer><name Class="com.github.javaparser.ast.expr.SimpleName">day</name><type Class="com.github.javaparser.ast.type.PrimitiveType" type="INT"/></node></variables></expression><comment Class="com.github.javaparser.ast.comments.LineComment" content=" Switching on day."/></node><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.VariableDeclarationExpr"><variables><node Class="com.github.javaparser.ast.body.VariableDeclarator"><initializer Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">9</initializer><name Class="com.github.javaparser.ast.expr.SimpleName">next</name><type Class="com.github.javaparser.ast.type.PrimitiveType" type="INT"/></node></variables></expression></node><node Class="com.github.javaparser.ast.stmt.SwitchStmt"><entries><node Class="com.github.javaparser.ast.stmt.SwitchEntry" isDefault="false" type="STATEMENT_GROUP"><labels><node Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">1</node></labels><statements><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.MethodCallExpr"><arguments><node Class="com.github.javaparser.ast.expr.StringLiteralExpr">Monday</node></arguments><name Class="com.github.javaparser.ast.expr.SimpleName">println</name><scope Class="com.github.javaparser.ast.expr.FieldAccessExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">out</name><scope Class="com.github.javaparser.ast.expr.NameExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">System</name></scope></scope></expression></node><node Class="com.github.javaparser.ast.stmt.IfStmt"><condition Class="com.github.javaparser.ast.expr.BinaryExpr" operator="EQUALS"><left Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">1</left><right Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">1</right></condition><thenStmt Class="com.github.javaparser.ast.stmt.BlockStmt"><statements><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.AssignExpr" operator="ASSIGN"><target Class="com.github.javaparser.ast.expr.NameExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">day</name></target><value Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">5</value></expression></node></statements></thenStmt></node><node Class="com.github.javaparser.ast.stmt.BreakStmt"/></statements></node><node Class="com.github.javaparser.ast.stmt.SwitchEntry" isDefault="false" type="STATEMENT_GROUP"><labels><node Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">2</node></labels><statements><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.MethodCallExpr"><arguments><node Class="com.github.javaparser.ast.expr.StringLiteralExpr">Tuesday</node></arguments><name Class="com.github.javaparser.ast.expr.SimpleName">println</name><scope Class="com.github.javaparser.ast.expr.FieldAccessExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">out</name><scope Class="com.github.javaparser.ast.expr.NameExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">System</name></scope></scope></expression></node><node Class="com.github.javaparser.ast.stmt.BreakStmt"/></statements></node><node Class="com.github.javaparser.ast.stmt.SwitchEntry" isDefault="false" type="STATEMENT_GROUP"><labels><node Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">3</node></labels><statements><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.MethodCallExpr"><arguments><node Class="com.github.javaparser.ast.expr.StringLiteralExpr">Wednesday</node></arguments><name Class="com.github.javaparser.ast.expr.SimpleName">println</name><scope Class="com.github.javaparser.ast.expr.FieldAccessExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">out</name><scope Class="com.github.javaparser.ast.expr.NameExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">System</name></scope></scope></expression></node><node Class="com.github.javaparser.ast.stmt.BreakStmt"/></statements></node><node Class="com.github.javaparser.ast.stmt.SwitchEntry" isDefault="false" type="STATEMENT_GROUP"><labels><node Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">4</node></labels><statements><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.MethodCallExpr"><arguments><node Class="com.github.javaparser.ast.expr.StringLiteralExpr">Thursday</node></arguments><name Class="com.github.javaparser.ast.expr.SimpleName">println</name><scope Class="com.github.javaparser.ast.expr.FieldAccessExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">out</name><scope Class="com.github.javaparser.ast.expr.NameExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">System</name></scope></scope></expression></node><node Class="com.github.javaparser.ast.stmt.BreakStmt"/></statements></node><node Class="com.github.javaparser.ast.stmt.SwitchEntry" isDefault="false" type="STATEMENT_GROUP"><labels><node Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">5</node></labels><statements><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.MethodCallExpr"><arguments><node Class="com.github.javaparser.ast.expr.StringLiteralExpr">Friday</node></arguments><name Class="com.github.javaparser.ast.expr.SimpleName">println</name><scope Class="com.github.javaparser.ast.expr.FieldAccessExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">out</name><scope Class="com.github.javaparser.ast.expr.NameExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">System</name></scope></scope></expression></node><node Class="com.github.javaparser.ast.stmt.BreakStmt"/></statements></node><node Class="com.github.javaparser.ast.stmt.SwitchEntry" isDefault="false" type="STATEMENT_GROUP"><labels><node Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">6</node></labels><statements><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.MethodCallExpr"><arguments><node Class="com.github.javaparser.ast.expr.StringLiteralExpr">Saturday</node></arguments><name Class="com.github.javaparser.ast.expr.SimpleName">println</name><scope Class="com.github.javaparser.ast.expr.FieldAccessExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">out</name><scope Class="com.github.javaparser.ast.expr.NameExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">System</name></scope></scope></expression></node><node Class="com.github.javaparser.ast.stmt.BreakStmt"/></statements></node><node Class="com.github.javaparser.ast.stmt.SwitchEntry" isDefault="false" type="STATEMENT_GROUP"><labels><node Class="com.github.javaparser.ast.expr.IntegerLiteralExpr">7</node></labels><statements><node Class="com.github.javaparser.ast.stmt.ExpressionStmt"><expression Class="com.github.javaparser.ast.expr.MethodCallExpr"><arguments><node Class="com.github.javaparser.ast.expr.StringLiteralExpr">Sunday</node></arguments><name Class="com.github.javaparser.ast.expr.SimpleName">println</name><scope Class="com.github.javaparser.ast.expr.FieldAccessExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">out</name><scope Class="com.github.javaparser.ast.expr.NameExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">System</name></scope></scope></expression></node><node Class="com.github.javaparser.ast.stmt.BreakStmt"/></statements></node></entries><selector Class="com.github.javaparser.ast.expr.NameExpr"><name Class="com.github.javaparser.ast.expr.SimpleName">day</name></selector></node></statements></body><type Class="com.github.javaparser.ast.type.VoidType"/><modifiers><node Class="com.github.javaparser.ast.Modifier" keyword="PUBLIC"/><node Class="com.github.javaparser.ast.Modifier" keyword="STATIC"/></modifiers><name Class="com.github.javaparser.ast.expr.SimpleName">main</name><parameters><node Class="com.github.javaparser.ast.body.Parameter" isVarArgs="false"><name Class="com.github.javaparser.ast.expr.SimpleName">args</name><type Class="com.github.javaparser.ast.type.ArrayType" origin="TYPE"><componentType Class="com.github.javaparser.ast.type.ClassOrInterfaceType"><name Class="com.github.javaparser.ast.expr.SimpleName">String</name></componentType></type></node></parameters><comment Class="com.github.javaparser.ast.comments.JavadocComment" content="&#10;   * This is the main method which makes use of the switch case.&#10;   * @param args Unused.&#10;   "/></node></members><modifiers><node Class="com.github.javaparser.ast.Modifier" keyword="PUBLIC"/></modifiers><name Class="com.github.javaparser.ast.expr.SimpleName">Main</name><comment Class="com.github.javaparser.ast.comments.JavadocComment" content="&#10; * This is a simple Java program.&#10; "/></node></types></node>